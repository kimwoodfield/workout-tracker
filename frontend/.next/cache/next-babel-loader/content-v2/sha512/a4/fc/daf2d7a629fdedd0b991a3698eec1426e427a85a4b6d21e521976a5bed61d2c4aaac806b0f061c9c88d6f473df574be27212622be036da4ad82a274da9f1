{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\kimwoodfield\\\\Documents\\\\GitHub\\\\workout-tracker\\\\frontend\\\\components\\\\Forms\\\\LoginForm.js\";\nimport React, { useState } from 'react';\nimport SubmitBtn from './SubmitBtn';\nimport Input from './FormInput';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport styled from 'styled-components';\nconst Form = styled.form.withConfig({\n  displayName: \"LoginForm__Form\",\n  componentId: \"sc-1udqss8-0\"\n})([\"display:flex;flex-direction:column;width:18rem;\"]);\n\nconst LoginForm = () => {\n  // Setting the state\n  const {\n    0: username,\n    1: setUsername\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: usernameErr,\n    1: setUsernameErr\n  } = useState({});\n  const {\n    0: passwordErr,\n    1: setPasswordErr\n  } = useState({});\n  const {\n    0: submitting,\n    1: setSubmitting\n  } = useState(false); // Handles the form submission\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setSubmitting(true);\n    const isValid = formValidation(); // If the input data is valid -\n\n    if (isValid) {\n      // Send this data to the api\n      fetch('http://localhost:3000/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      }).then(res => res.json()) // parse the response as JSON\n      .then(data => {\n        // Request sent.\n        if (data.ok === fa) {// if the response is a 201, let the user login.\n        } else {// if the response is a 401, block the submission.\n          }\n\n        console.log(data.msg);\n        alert(data.msg);\n        setUsername('');\n        setPassword('');\n      }).catch(err => {\n        // Fetch couldn't send the request.\n        console.log('fetch failed');\n      });\n    }\n  };\n  /* Frontend form validation is handled here */\n\n\n  const formValidation = () => {\n    const usernameErr = {};\n    const passwordErr = {};\n    let isValid = true; // If username is left empty or length of the username is less than five characters -\n\n    if (username.length === 0) {\n      usernameErr.usernameEmpty = \"You must enter a username.\";\n    } else if (username.length < 5) {\n      usernameErr.usernameShort = \"Username needs to be 5 or more characters.\";\n      isValid = false;\n    } // If the length of the password is less than three characters -\n\n\n    if (password.length === 0) {\n      passwordErr.passwordEmpty = \"You must enter a password.\";\n    } else if (password.length < 4) {\n      passwordErr.passwordShort = \"Password needs to be 4 or more characters.\";\n      isValid = false;\n    } // Update error objects\n\n\n    setUsernameErr(usernameErr);\n    setPasswordErr(passwordErr);\n    return isValid;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: username,\n      onChange: e => {\n        setUsername(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), Object.keys(usernameErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: usernameErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: e => {\n        setPassword(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), Object.keys(passwordErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: passwordErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(SubmitBtn, {\n      type: \"submit\",\n      children: \"Log In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\nexport default LoginForm;","map":{"version":3,"sources":["C:/Users/kimwoodfield/Documents/GitHub/workout-tracker/frontend/components/Forms/LoginForm.js"],"names":["React","useState","SubmitBtn","Input","ErrorMessage","styled","Form","form","LoginForm","username","setUsername","password","setPassword","usernameErr","setUsernameErr","passwordErr","setPasswordErr","submitting","setSubmitting","onSubmit","e","preventDefault","isValid","formValidation","fetch","method","headers","body","JSON","stringify","then","res","json","data","ok","fa","console","log","msg","alert","catch","err","length","usernameEmpty","usernameShort","passwordEmpty","passwordShort","target","value","Object","keys","map","key"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,IAAI,GAAGD,MAAM,CAACE,IAAV;AAAA;AAAA;AAAA,uDAAV;;AAMA,MAAMC,SAAS,GAAG,MAAM;AAEpB;AACA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACU,QAAD;AAAA,OAAWC;AAAX,MAA0BX,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM;AAAA,OAACY,WAAD;AAAA,OAAcC;AAAd,MAAgCb,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACc,WAAD;AAAA,OAAcC;AAAd,MAAgCf,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM;AAAA,OAAEgB,UAAF;AAAA,OAAcC;AAAd,MAAgCjB,QAAQ,CAAC,KAAD,CAA9C,CAToB,CAWpB;;AACA,QAAMkB,QAAQ,GAAIC,CAAD,IAAO;AACpBA,IAAAA,CAAC,CAACC,cAAF;AACAH,IAAAA,aAAa,CAAC,IAAD,CAAb;AACA,UAAMI,OAAO,GAAGC,cAAc,EAA9B,CAHoB,CAIpB;;AACA,QAAID,OAAJ,EAAa;AACT;AACAE,MAAAA,KAAK,CAAC,6BAAD,EAAgC;AACjCC,QAAAA,MAAM,EAAE,MADyB;AAEjCC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFwB;AAKjCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEpB,UAAAA,QAAF;AAAYE,UAAAA;AAAZ,SAAf;AAL2B,OAAhC,CAAL,CAOCmB,IAPD,CAOMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPb,EAOyB;AAPzB,OAQCF,IARD,CAQMG,IAAI,IAAI;AACV;AACA,YAAIA,IAAI,CAACC,EAAL,KAAYC,EAAhB,EAAoB,CAChB;AACH,SAFD,MAEO,CACH;AACH;;AACDC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACK,GAAjB;AACAC,QAAAA,KAAK,CAACN,IAAI,CAACK,GAAN,CAAL;AACA5B,QAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,QAAAA,WAAW,CAAC,EAAD,CAAX;AACH,OAnBD,EAoBC4B,KApBD,CAoBOC,GAAG,IAAI;AACV;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,OAvBD;AAwBH;AACJ,GAhCD;AAkCA;;;AACA,QAAMd,cAAc,GAAG,MAAM;AACzB,UAAMV,WAAW,GAAG,EAApB;AACA,UAAME,WAAW,GAAG,EAApB;AACA,QAAIO,OAAO,GAAG,IAAd,CAHyB,CAKzB;;AACA,QAAIb,QAAQ,CAACiC,MAAT,KAAoB,CAAxB,EAA2B;AACvB7B,MAAAA,WAAW,CAAC8B,aAAZ,GAA4B,4BAA5B;AACH,KAFD,MAEO,IAAIlC,QAAQ,CAACiC,MAAT,GAAkB,CAAtB,EAAyB;AAC5B7B,MAAAA,WAAW,CAAC+B,aAAZ,GAA4B,4CAA5B;AACAtB,MAAAA,OAAO,GAAG,KAAV;AACH,KAXwB,CAazB;;;AACA,QAAIX,QAAQ,CAAC+B,MAAT,KAAoB,CAAxB,EAA2B;AACvB3B,MAAAA,WAAW,CAAC8B,aAAZ,GAA4B,4BAA5B;AACH,KAFD,MAEO,IAAIlC,QAAQ,CAAC+B,MAAT,GAAkB,CAAtB,EAAyB;AAC5B3B,MAAAA,WAAW,CAAC+B,aAAZ,GAA4B,4CAA5B;AACAxB,MAAAA,OAAO,GAAG,KAAV;AACH,KAnBwB,CAqBzB;;;AACAR,IAAAA,cAAc,CAACD,WAAD,CAAd;AACAG,IAAAA,cAAc,CAACD,WAAD,CAAd;AACA,WAAOO,OAAP;AACH,GAzBD;;AA2BA,sBACI,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEH,QAAhB;AAAA,4BAEI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AACQ,MAAA,WAAW,EAAC,UADpB;AAEQ,MAAA,KAAK,EAAEV,QAFf;AAGQ,MAAA,QAAQ,EAAGW,CAAD,IAAO;AAACV,QAAAA,WAAW,CAACU,CAAC,CAAC2B,MAAF,CAASC,KAAV,CAAX;AAA4B;AAHtD;AAAA;AAAA;AAAA;AAAA,YAFJ,EAMaC,MAAM,CAACC,IAAP,CAAYrC,WAAZ,EAAyBsC,GAAzB,CAA8BC,GAAD,IAAS;AACpC,0BAAO,QAAC,YAAD;AAAA,kBAAevC,WAAW,CAACuC,GAAD;AAA1B;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFC,CANb,eAUI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AACQ,MAAA,WAAW,EAAC,UADpB;AAEQ,MAAA,KAAK,EAAEzC,QAFf;AAGQ,MAAA,QAAQ,EAAGS,CAAD,IAAO;AAACR,QAAAA,WAAW,CAACQ,CAAC,CAAC2B,MAAF,CAASC,KAAV,CAAX;AAA4B;AAHtD;AAAA;AAAA;AAAA;AAAA,YAVJ,EAcaC,MAAM,CAACC,IAAP,CAAYnC,WAAZ,EAAyBoC,GAAzB,CAA8BC,GAAD,IAAS;AACpC,0BAAO,QAAC,YAAD;AAAA,kBAAerC,WAAW,CAACqC,GAAD;AAA1B;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFC,CAdb,eAiBI,QAAC,SAAD;AAAW,MAAA,IAAI,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CA/FD;;AAiGA,eAAe5C,SAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport SubmitBtn from './SubmitBtn'\r\nimport Input from './FormInput'\r\nimport ErrorMessage from '../Common/ErrorMessage'\r\nimport styled from 'styled-components'\r\n\r\nconst Form = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 18rem;\r\n`\r\n\r\nconst LoginForm = () => {\r\n\r\n    // Setting the state\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [usernameErr, setUsernameErr] = useState({});\r\n    const [passwordErr, setPasswordErr] = useState({});\r\n\r\n    const [ submitting, setSubmitting ] = useState(false);\r\n\r\n    // Handles the form submission\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        setSubmitting(true);\r\n        const isValid = formValidation();\r\n        // If the input data is valid -\r\n        if (isValid) {\r\n            // Send this data to the api\r\n            fetch('http://localhost:3000/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ username, password }),\r\n            })\r\n            .then(res => res.json()) // parse the response as JSON\r\n            .then(data => {\r\n                // Request sent.\r\n                if (data.ok === fa) {\r\n                    // if the response is a 201, let the user login.\r\n                } else {\r\n                    // if the response is a 401, block the submission.\r\n                }\r\n                console.log(data.msg);\r\n                alert(data.msg);\r\n                setUsername('');\r\n                setPassword('');\r\n            })\r\n            .catch(err => {\r\n                // Fetch couldn't send the request.\r\n                console.log('fetch failed');\r\n            })\r\n        } \r\n    }\r\n\r\n    /* Frontend form validation is handled here */\r\n    const formValidation = () => {\r\n        const usernameErr = {};\r\n        const passwordErr = {};\r\n        let isValid = true;\r\n\r\n        // If username is left empty or length of the username is less than five characters -\r\n        if (username.length === 0) {\r\n            usernameErr.usernameEmpty = \"You must enter a username.\";\r\n        } else if (username.length < 5) {\r\n            usernameErr.usernameShort = \"Username needs to be 5 or more characters.\";\r\n            isValid = false;\r\n        }\r\n\r\n        // If the length of the password is less than three characters -\r\n        if (password.length === 0) {\r\n            passwordErr.passwordEmpty = \"You must enter a password.\";\r\n        } else if (password.length < 4) {\r\n            passwordErr.passwordShort = \"Password needs to be 4 or more characters.\";\r\n            isValid = false;\r\n        }\r\n\r\n        // Update error objects\r\n        setUsernameErr(usernameErr);\r\n        setPasswordErr(passwordErr);\r\n        return isValid;\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={onSubmit}>\r\n            {/* <label for=\"username\">Username : </label> */}\r\n            <Input type=\"text\" \r\n                    placeholder=\"Username\"\r\n                    value={username}\r\n                    onChange={(e) => {setUsername(e.target.value)}}/>\r\n                    {Object.keys(usernameErr).map((key) => {\r\n                       return <ErrorMessage>{usernameErr[key]}</ErrorMessage>\r\n                   })}\r\n            {/* <label for=\"password\">Password : </label> */}\r\n            <Input type=\"password\" \r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={(e) => {setPassword(e.target.value)}}/>\r\n                    {Object.keys(passwordErr).map((key) => {\r\n                       return <ErrorMessage>{passwordErr[key]}</ErrorMessage>\r\n                   })}\r\n            <SubmitBtn type=\"submit\">Log In</SubmitBtn>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n"]},"metadata":{},"sourceType":"module"}