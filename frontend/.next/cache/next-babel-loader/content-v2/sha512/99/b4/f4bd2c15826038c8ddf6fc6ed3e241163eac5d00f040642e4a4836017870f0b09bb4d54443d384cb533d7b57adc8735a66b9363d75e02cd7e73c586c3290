{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kimwoodfield/Documents/GitHub/workout-tracker/frontend/components/Forms/LoginForm.js\";\nimport React, { useState } from 'react';\nimport SubmitBtn from './SubmitBtn';\nimport Input from './FormInput';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\nconst Form = styled.form.withConfig({\n  displayName: \"LoginForm__Form\",\n  componentId: \"sc-1udqss8-0\"\n})([\"display:flex;flex-direction:column;width:18rem;\"]);\n\nconst LoginForm = () => {\n  const router = useRouter(); // Setting the state\n\n  const {\n    0: username,\n    1: setUsername\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: usernameErr,\n    1: setUsernameErr\n  } = useState({});\n  const {\n    0: passwordErr,\n    1: setPasswordErr\n  } = useState({});\n  const {\n    0: invalidUser,\n    1: setInvalidUser\n  } = useState(\"\");\n  const {\n    0: invalidPass,\n    1: setInvalidPass\n  } = useState(\"\");\n  const {\n    0: submitting,\n    1: setSubmitting\n  } = useState(false); // Handles the form submission\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setSubmitting(true);\n    const isValid = formValidation(); // If the input data is valid -\n\n    if (isValid) {\n      // Send this data to the api\n      fetch('http://localhost:3000/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        }) // credentials: \"include\"\n\n      }).then(res => {\n        switch (res.status) {\n          case 400:\n            console.log('400 works');\n            setInvalidPass('Invalid username and password.');\n            break;\n\n          case 429:\n            console.log('429 error');\n\n          case 201:\n            router.push('/log');\n            break;\n          //             res.json().then((data) => {\n          //             // Request sent.\n          //             console.log(data);\n          //             console.log(data.status);\n          //             if (data.status == 400) {\n          //                 console.log(data);\n          //                 setInvalidUser(errors.msg);\n          //                 setUsername('');\n          //                 setPassword('');\n          //                 e.preventDefault();\n          //             }\n          //             // If username issue\n          //             if (data.status === 401 && data.issue === 'Username') {\n          //                 setInvalidUser(data.msg);\n          //                 setUsername('');\n          //                 setPassword('');\n          //                 e.preventDefault();\n          //             }\n          //             // If password issue\n          //             if (data.status === 401 && data.issue === 'Password') {\n          //                 setInvalidPass(data.msg);\n          //                 setUsername('');\n          //                 setPassword('');\n          //                 e.preventDefault();\n          //             }\n          //             if (data.ok === false && data.issue === 'doesnt exist') {\n          //                 // if the response is a 401, block the submission..\n          //                 console.log(data);\n          //                 console.log(data.msg);\n          //                 setInvalidUser(data.msg);\n          //                 setUsername('');\n          //                 setPassword('');\n          //                 e.preventDefault();\n          //             } else if (data.ok === false) {\n          //                 // if the response is a 401, block the submission..\n          //                 console.log(data);\n          //                 console.log(data.msg);\n          //                 setUsername('');\n          //                 setPassword('');\n          //                 e.preventDefault();\n          //             } else {\n          //                 // if the response is not a 401, allow the submission.\n          //                 console.log(data.msg);\n          //                 alert(data.msg);\n          //                 setUsername('');\n          //                 setPassword('');\n          //                 router.push('/log');\n          //             }\n          // })\n        }\n      }).catch(err => {\n        // Fetch couldn't send the request.\n        // 500 Error\n        console.log('fetch failed');\n      });\n    } else {\n      e.preventDefault();\n    }\n  };\n  /* Frontend form validation is handled here */\n\n\n  const formValidation = () => {\n    const usernameErr = {};\n    const passwordErr = {};\n    let isValid = true; // Update error objects\n\n    setUsernameErr(usernameErr);\n    setPasswordErr(passwordErr);\n    return isValid;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: username,\n      onChange: e => {\n        setUsername(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: invalidUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }, this), Object.keys(usernameErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: usernameErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: e => {\n        setPassword(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: invalidPass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }, this), Object.keys(passwordErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: passwordErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(SubmitBtn, {\n      type: \"submit\",\n      children: \"Log In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n};\n\nexport default LoginForm;","map":{"version":3,"sources":["/Users/kimwoodfield/Documents/GitHub/workout-tracker/frontend/components/Forms/LoginForm.js"],"names":["React","useState","SubmitBtn","Input","ErrorMessage","styled","useRouter","Form","form","LoginForm","router","username","setUsername","password","setPassword","usernameErr","setUsernameErr","passwordErr","setPasswordErr","invalidUser","setInvalidUser","invalidPass","setInvalidPass","submitting","setSubmitting","onSubmit","e","preventDefault","isValid","formValidation","fetch","method","headers","body","JSON","stringify","then","res","status","console","log","push","catch","err","target","value","Object","keys","map","key"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport SubmitBtn from './SubmitBtn'\nimport Input from './FormInput'\nimport ErrorMessage from '../Common/ErrorMessage'\nimport styled from 'styled-components'\nimport { useRouter } from 'next/router'\n\nconst Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    width: 18rem;\n`\n\nconst LoginForm = () => {\n\n    const router = useRouter()\n\n    // Setting the state\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    const [usernameErr, setUsernameErr] = useState({});\n    const [passwordErr, setPasswordErr] = useState({});\n\n    const [invalidUser, setInvalidUser] = useState(\"\");\n    const [invalidPass, setInvalidPass] = useState(\"\");\n\n\n\n    const [ submitting, setSubmitting ] = useState(false);\n\n    // Handles the form submission\n    const onSubmit = (e) => {\n        e.preventDefault();\n        setSubmitting(true);\n        const isValid = formValidation();\n        // If the input data is valid -\n        if (isValid) {\n            // Send this data to the api\n            fetch('http://localhost:3000/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ username, password })\n                // credentials: \"include\"\n            })\n            .then((res) => {\n                switch(res.status) {\n                    case 400:\n                        console.log('400 works');\n                        setInvalidPass('Invalid username and password.');\n                        break;\n                    case 429:\n                        console.log('429 error')\n                    case 201:\n                        router.push('/log');\n                        break;\n            //             res.json().then((data) => {\n            //             // Request sent.\n        \n            //             console.log(data);\n        \n            //             console.log(data.status);\n        \n            //             if (data.status == 400) {\n            //                 console.log(data);\n            //                 setInvalidUser(errors.msg);\n            //                 setUsername('');\n            //                 setPassword('');\n            //                 e.preventDefault();\n            //             }\n        \n            //             // If username issue\n            //             if (data.status === 401 && data.issue === 'Username') {\n            //                 setInvalidUser(data.msg);\n            //                 setUsername('');\n            //                 setPassword('');\n            //                 e.preventDefault();\n            //             }\n            //             // If password issue\n            //             if (data.status === 401 && data.issue === 'Password') {\n            //                 setInvalidPass(data.msg);\n            //                 setUsername('');\n            //                 setPassword('');\n            //                 e.preventDefault();\n            //             }\n            //             if (data.ok === false && data.issue === 'doesnt exist') {\n            //                 // if the response is a 401, block the submission..\n            //                 console.log(data);\n            //                 console.log(data.msg);\n            //                 setInvalidUser(data.msg);\n            //                 setUsername('');\n            //                 setPassword('');\n            //                 e.preventDefault();\n            //             } else if (data.ok === false) {\n            //                 // if the response is a 401, block the submission..\n            //                 console.log(data);\n            //                 console.log(data.msg);\n            //                 setUsername('');\n            //                 setPassword('');\n            //                 e.preventDefault();\n            //             } else {\n            //                 // if the response is not a 401, allow the submission.\n            //                 console.log(data.msg);\n            //                 alert(data.msg);\n            //                 setUsername('');\n            //                 setPassword('');\n            //                 router.push('/log');\n            //             }\n            // })\n        }})\n            .catch(err => {\n                // Fetch couldn't send the request.\n                // 500 Error\n                console.log('fetch failed');\n            })\n        } else {\n            e.preventDefault();\n        }\n    }\n\n    /* Frontend form validation is handled here */\n    const formValidation = () => {\n        const usernameErr = {};\n        const passwordErr = {};\n        let isValid = true;\n\n\n        // Update error objects\n        setUsernameErr(usernameErr);\n        setPasswordErr(passwordErr);\n        return isValid;\n    }\n\n    return (\n        <Form onSubmit={onSubmit}>\n            {/* <label for=\"username\">Username : </label> */}\n            <Input type=\"text\" \n                    placeholder=\"Username\"\n                    value={username}\n                    onChange={(e) => {setUsername(e.target.value)}}/>\n                    <ErrorMessage>{invalidUser}</ErrorMessage>\n                    {Object.keys(usernameErr).map((key) => {\n                       return <ErrorMessage>{usernameErr[key]}</ErrorMessage>\n                   })}\n            {/* <label for=\"password\">Password : </label> */}\n            <Input type=\"password\" \n                    placeholder=\"Password\"\n                    value={password}\n                    onChange={(e) => {setPassword(e.target.value)}}/>\n                    <ErrorMessage>{invalidPass}</ErrorMessage>\n                    {Object.keys(passwordErr).map((key) => {\n                       return <ErrorMessage>{passwordErr[key]}</ErrorMessage>\n                   })}\n            <SubmitBtn type=\"submit\">Log In</SubmitBtn>\n        </Form>\n    )\n}\n\nexport default LoginForm\n"]},"metadata":{},"sourceType":"module"}