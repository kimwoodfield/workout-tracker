{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\kimwoodfield\\\\Documents\\\\GitHub\\\\workout-tracker\\\\frontend\\\\components\\\\Forms\\\\RegisterForm.js\";\nimport React, { useState } from 'react';\nimport ErrorMessage from '../Common/ErrorMessage';\n\nconst RegisterForm = () => {\n  // Setting the state\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: fullname,\n    1: setFullname\n  } = useState('');\n  const {\n    0: username,\n    1: setUsername\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: emailErr,\n    1: setEmailErr\n  } = useState({});\n  const {\n    0: fullnameErr,\n    1: setFullnameErr\n  } = useState({});\n  const {\n    0: usernameErr,\n    1: setUsernameErr\n  } = useState({});\n  const {\n    0: passwordErr,\n    1: setPasswordErr\n  } = useState({}); // Prevents form from submitting normally on submit\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const isValid = formValidation();\n  };\n  /* Frontend form validation is handled here */\n\n\n  const formValidation = () => {\n    const emailErr = {};\n    const fullnameErr = {};\n    const usernameErr = {};\n    const passwordErr = {};\n    let isValid = true; // Regex to test email against\n\n    let regexp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // If email is left empty or does not match the regex -\n\n    if (email.length === 0) {\n      emailErr.emailEmpty = \"You must enter an email address.\";\n    } else if (regexp.test(email) === false) {\n      emailErr.emailWrongChars = \"This is not a valid email address.\";\n      isValid = false;\n    } // If full name is left empty or first letter of the full name isn't capitalized -\n\n\n    if (fullname.length === 0) {\n      fullnameErr.fullnameEmpty = \"You must enter a name.\";\n    } else if (fullname[0] !== fullname[0].toUpperCase()) {\n      fullnameErr.startsLowercase = \"First letter of full name needs to be capitalized.\";\n      isValid = false;\n    } // If username is left empty or length of the username is less than five characters -\n\n\n    if (username.length === 0) {\n      usernameErr.usernameEmpty = \"You must enter a username.\";\n    } else if (username.length < 5) {\n      usernameErr.usernameShort = \"Username needs to be 5 or more characters.\";\n      isValid = false;\n    } // If the length of the password is less than three characters -\n\n\n    if (password.length === 0) {\n      passwordErr.passwordEmpty = \"You must enter a password.\";\n    }\n\n    if (password.length < 3) {\n      passwordErr.passwordShort = \"Password needs to be 3 or more characters.\";\n      isValid = false;\n    } // Update error objects\n\n\n    setEmailErr(emailErr);\n    setFullnameErr(fullnameErr);\n    setUsernameErr(usernameErr);\n    setPasswordErr(passwordErr);\n    return isValid;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"email\",\n      children: \"Email : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: email,\n      onChange: e => {\n        setEmail(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 20\n    }, this), Object.keys(emailErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: emailErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"fullname\",\n      children: \"Full name : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: fullname,\n      onChange: e => {\n        setFullname(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }, this), Object.keys(fullnameErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: fullnameErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"username\",\n      children: \"Username : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: username,\n      onChange: e => {\n        setUsername(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }, this), Object.keys(usernameErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: usernameErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"password\",\n      children: \"Password : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: password,\n      onChange: e => {\n        setPassword(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }, this), Object.keys(passwordErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: passwordErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\nexport default RegisterForm;","map":{"version":3,"sources":["C:/Users/kimwoodfield/Documents/GitHub/workout-tracker/frontend/components/Forms/RegisterForm.js"],"names":["React","useState","ErrorMessage","RegisterForm","email","setEmail","fullname","setFullname","username","setUsername","password","setPassword","emailErr","setEmailErr","fullnameErr","setFullnameErr","usernameErr","setUsernameErr","passwordErr","setPasswordErr","onSubmit","e","preventDefault","isValid","formValidation","regexp","length","emailEmpty","test","emailWrongChars","fullnameEmpty","toUpperCase","startsLowercase","usernameEmpty","usernameShort","passwordEmpty","passwordShort","target","value","Object","keys","map","key"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport ErrorMessage from '../Common/ErrorMessage'\r\n\r\nconst RegisterForm = () => {\r\n\r\n    // Setting the state\r\n    const [email, setEmail] = useState('');\r\n    const [fullname, setFullname] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [emailErr, setEmailErr] = useState({});\r\n    const [fullnameErr, setFullnameErr] = useState({});\r\n    const [usernameErr, setUsernameErr] = useState({});\r\n    const [passwordErr, setPasswordErr] = useState({});\r\n\r\n\r\n    // Prevents form from submitting normally on submit\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const isValid = formValidation();\r\n    }\r\n\r\n    /* Frontend form validation is handled here */\r\n    const formValidation = () => {\r\n        const emailErr = {};\r\n        const fullnameErr = {};\r\n        const usernameErr = {};\r\n        const passwordErr = {};\r\n        let isValid = true;\r\n\r\n        // Regex to test email against\r\n        let regexp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n        // If email is left empty or does not match the regex -\r\n        if (email.length === 0) {\r\n            emailErr.emailEmpty = \"You must enter an email address.\"\r\n        } else if (regexp.test(email) === false) {\r\n            emailErr.emailWrongChars = \"This is not a valid email address.\";\r\n            isValid = false;\r\n        }\r\n\r\n        // If full name is left empty or first letter of the full name isn't capitalized -\r\n        if (fullname.length === 0) {\r\n            fullnameErr.fullnameEmpty = \"You must enter a name.\";\r\n        } else if (fullname[0] !== fullname[0].toUpperCase()) {\r\n            fullnameErr.startsLowercase = \"First letter of full name needs to be capitalized.\";\r\n            isValid = false;\r\n        } \r\n\r\n        // If username is left empty or length of the username is less than five characters -\r\n        if (username.length === 0) {\r\n            usernameErr.usernameEmpty = \"You must enter a username.\";\r\n        } else if (username.length < 5) {\r\n            usernameErr.usernameShort = \"Username needs to be 5 or more characters.\";\r\n            isValid = false;\r\n        }\r\n\r\n        // If the length of the password is less than three characters -\r\n        if (password.length === 0) {\r\n            passwordErr.passwordEmpty = \"You must enter a password.\";\r\n        }\r\n        if (password.length < 3) {\r\n            passwordErr.passwordShort = \"Password needs to be 3 or more characters.\";\r\n            isValid = false;\r\n        }\r\n\r\n        // Update error objects\r\n        setEmailErr(emailErr);\r\n        setFullnameErr(fullnameErr);\r\n        setUsernameErr(usernameErr);\r\n        setPasswordErr(passwordErr);\r\n        return isValid;\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <label for=\"email\">Email : </label>\r\n            <input type=\"text\" \r\n                   value={email}\r\n                   onChange={(e) => {setEmail(e.target.value)}}/>\r\n                   <br />\r\n                   {Object.keys(emailErr).map((key) => {\r\n                       return <ErrorMessage>{emailErr[key]}</ErrorMessage>\r\n                   })}\r\n            <label for=\"fullname\">Full name : </label>\r\n            <input type=\"text\" \r\n                    value={fullname}\r\n                    onChange={(e) => {setFullname(e.target.value)}}/>\r\n                    <br />\r\n                    {Object.keys(fullnameErr).map((key) => {\r\n                       return <ErrorMessage>{fullnameErr[key]}</ErrorMessage>\r\n                   })}\r\n            <label for=\"username\">Username : </label>\r\n            <input type=\"text\" \r\n                    value={username}\r\n                    onChange={(e) => {setUsername(e.target.value)}}/>\r\n                    <br />\r\n                    {Object.keys(usernameErr).map((key) => {\r\n                       return <ErrorMessage>{usernameErr[key]}</ErrorMessage>\r\n                   })}\r\n            <label for=\"password\">Password : </label>\r\n            <input type=\"password\" \r\n                    value={password}\r\n                    onChange={(e) => {setPassword(e.target.value)}}/>\r\n                    <br />\r\n                    {Object.keys(passwordErr).map((key) => {\r\n                       return <ErrorMessage>{passwordErr[key]}</ErrorMessage>\r\n                   })}\r\n            <button type=\"submit\">Register</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm\r\n"]},"metadata":{},"sourceType":"module"}