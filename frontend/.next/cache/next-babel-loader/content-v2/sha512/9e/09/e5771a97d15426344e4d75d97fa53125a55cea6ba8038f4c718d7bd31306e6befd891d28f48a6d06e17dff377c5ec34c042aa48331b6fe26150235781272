{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kimwoodfield/Documents/GitHub/workout-tracker/frontend/components/Forms/RegisterForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport SubmitBtn from './SubmitBtn';\nimport Input from './FormInput';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport styled from 'styled-components';\nvar Form = styled.form.withConfig({\n  displayName: \"RegisterForm__Form\",\n  componentId: \"ri5t6n-0\"\n})([\"display:flex;flex-direction:column;width:18rem;\"]);\n_c = Form;\n\nvar RegisterForm = function RegisterForm() {\n  _s();\n\n  // Setting the state\n  var _useState = useState(''),\n      email = _useState[0],\n      setEmail = _useState[1];\n\n  var _useState2 = useState(''),\n      fullname = _useState2[0],\n      setFullname = _useState2[1];\n\n  var _useState3 = useState(''),\n      username = _useState3[0],\n      setUsername = _useState3[1];\n\n  var _useState4 = useState(''),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState({}),\n      emailErr = _useState5[0],\n      setEmailErr = _useState5[1];\n\n  var _useState6 = useState({}),\n      fullnameErr = _useState6[0],\n      setFullnameErr = _useState6[1];\n\n  var _useState7 = useState({}),\n      usernameErr = _useState7[0],\n      setUsernameErr = _useState7[1];\n\n  var _useState8 = useState({}),\n      passwordErr = _useState8[0],\n      setPasswordErr = _useState8[1];\n\n  var _useState9 = useState(false),\n      submitting = _useState9[0],\n      setSubmitting = _useState9[1]; // Handles the form submission\n\n\n  var onSubmit = function onSubmit(e) {\n    e.preventDefault();\n    setSubmitting(true);\n    var isValid = formValidation(); // If the input data is valid - \n\n    if (isValid) {\n      // Make a POST request to our api route with the input data\n      fetch('localhost:3000/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({})\n      }).then(function (res) {\n        return res.json();\n      }) // parse the response as JSON\n      .then(function (data) {\n        // Request sent.\n        console.log(data.msg);\n        setEmail('');\n        setFullname('');\n        setUsername('');\n        setPassword('');\n      })[\"catch\"](function (err) {\n        // Fetch couldn't send the request.\n        console.log(data.msg);\n      });\n    }\n  };\n  /* Frontend form validation is handled here */\n\n\n  var formValidation = function formValidation() {\n    var emailErr = {};\n    var fullnameErr = {};\n    var usernameErr = {};\n    var passwordErr = {};\n    var isValid = true; // Regex to test email against\n\n    var regexp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // If email is left empty or does not match the regex -\n\n    if (email.length === 0) {\n      emailErr.emailEmpty = \"You must enter an email address.\";\n    } else if (!email.includes('@')) {\n      emailErr.emailMissingSymb = \"Invalid email. Email must have @\";\n    } else if (regexp.test(email) === false) {\n      emailErr.emailWrongChars = \"This is not a valid email address.\";\n      isValid = false;\n    } // If full name is left empty or first letter of the full name isn't capitalized -\n\n\n    if (fullname.length === 0) {\n      fullnameErr.fullnameEmpty = \"You must enter a full name.\";\n    } else if (fullname[0] !== fullname[0].toUpperCase()) {\n      fullnameErr.startsLowercase = \"First letter of full name needs to be capitalized.\";\n      isValid = false;\n    } // If username is left empty or length of the username is less than five characters -\n\n\n    if (username.length === 0) {\n      usernameErr.usernameEmpty = \"You must enter a username.\";\n    } else if (username.length < 5) {\n      usernameErr.usernameShort = \"Username needs to be 5 or more characters.\";\n      isValid = false;\n    } // If the length of the password is less than three characters -\n\n\n    if (password.length === 0) {\n      passwordErr.passwordEmpty = \"You must enter a password.\";\n    } else if (password.length < 4) {\n      passwordErr.passwordShort = \"Password needs to be 4 or more characters.\";\n      isValid = false;\n    } // Update error objects\n\n\n    setEmailErr(emailErr);\n    setFullnameErr(fullnameErr);\n    setUsernameErr(usernameErr);\n    setPasswordErr(passwordErr);\n    return isValid;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Email\",\n      value: email,\n      onChange: function onChange(e) {\n        setEmail(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, _this), Object.keys(emailErr).map(function (key) {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: emailErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 31\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Full name\",\n      value: fullname,\n      onChange: function onChange(e) {\n        setFullname(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, _this), Object.keys(fullnameErr).map(function (key) {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: fullnameErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 31\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: username,\n      onChange: function onChange(e) {\n        setUsername(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, _this), Object.keys(usernameErr).map(function (key) {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: usernameErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 31\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: function onChange(e) {\n        setPassword(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, _this), Object.keys(passwordErr).map(function (key) {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: passwordErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 31\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(SubmitBtn, {\n      type: \"submit\",\n      children: \"Sign up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(RegisterForm, \"+lTLCCD+sBVKIW+LmujKw1nPhCs=\");\n\n_c2 = RegisterForm;\nexport default RegisterForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Form\");\n$RefreshReg$(_c2, \"RegisterForm\");","map":{"version":3,"sources":["/Users/kimwoodfield/Documents/GitHub/workout-tracker/frontend/components/Forms/RegisterForm.js"],"names":["React","useState","SubmitBtn","Input","ErrorMessage","styled","Form","form","RegisterForm","email","setEmail","fullname","setFullname","username","setUsername","password","setPassword","emailErr","setEmailErr","fullnameErr","setFullnameErr","usernameErr","setUsernameErr","passwordErr","setPasswordErr","submitting","setSubmitting","onSubmit","e","preventDefault","isValid","formValidation","fetch","method","headers","body","JSON","stringify","then","res","json","data","console","log","msg","err","regexp","length","emailEmpty","includes","emailMissingSymb","test","emailWrongChars","fullnameEmpty","toUpperCase","startsLowercase","usernameEmpty","usernameShort","passwordEmpty","passwordShort","target","value","Object","keys","map","key"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport SubmitBtn from './SubmitBtn'\nimport Input from './FormInput'\nimport ErrorMessage from '../Common/ErrorMessage'\nimport styled from 'styled-components'\n\nconst Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    width: 18rem;\n`\n\nconst RegisterForm = () => {\n\n    // Setting the state\n    const [email, setEmail] = useState('');\n    const [fullname, setFullname] = useState('');\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    const [emailErr, setEmailErr] = useState({});\n    const [fullnameErr, setFullnameErr] = useState({});\n    const [usernameErr, setUsernameErr] = useState({});\n    const [passwordErr, setPasswordErr] = useState({});\n\n    const [ submitting, setSubmitting ] = useState(false);\n\n\n    // Handles the form submission\n    const onSubmit = (e) => {\n        e.preventDefault();\n        setSubmitting(true);\n        const isValid = formValidation();\n        // If the input data is valid - \n        if (isValid) {\n            // Make a POST request to our api route with the input data\n            fetch('localhost:3000/register', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({  }),\n              })\n              .then(res => res.json()) // parse the response as JSON\n              .then(data => {\n                // Request sent.\n                console.log(data.msg);\n                setEmail('');\n                setFullname('');\n                setUsername('');\n                setPassword('');\n              })\n              .catch(err => {\n                // Fetch couldn't send the request.\n                console.log(data.msg);\n              })\n        }\n    }\n\n    /* Frontend form validation is handled here */\n    const formValidation = () => {\n        const emailErr = {};\n        const fullnameErr = {};\n        const usernameErr = {};\n        const passwordErr = {};\n        let isValid = true;\n\n        // Regex to test email against\n        let regexp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n        // If email is left empty or does not match the regex -\n        if (email.length === 0) {\n            emailErr.emailEmpty = \"You must enter an email address.\";\n        } else if (!email.includes('@')) {\n            emailErr.emailMissingSymb = \"Invalid email. Email must have @\";\n        } else if (regexp.test(email) === false) {\n            emailErr.emailWrongChars = \"This is not a valid email address.\";\n            isValid = false;\n        }\n\n        // If full name is left empty or first letter of the full name isn't capitalized -\n        if (fullname.length === 0) {\n            fullnameErr.fullnameEmpty = \"You must enter a full name.\";\n        } else if (fullname[0] !== fullname[0].toUpperCase()) {\n            fullnameErr.startsLowercase = \"First letter of full name needs to be capitalized.\";\n            isValid = false;\n        } \n\n        // If username is left empty or length of the username is less than five characters -\n        if (username.length === 0) {\n            usernameErr.usernameEmpty = \"You must enter a username.\";\n        } else if (username.length < 5) {\n            usernameErr.usernameShort = \"Username needs to be 5 or more characters.\";\n            isValid = false;\n        }\n\n        // If the length of the password is less than three characters -\n        if (password.length === 0) {\n            passwordErr.passwordEmpty = \"You must enter a password.\";\n        } else if (password.length < 4) {\n            passwordErr.passwordShort = \"Password needs to be 4 or more characters.\";\n            isValid = false;\n        }\n\n        // Update error objects\n        setEmailErr(emailErr);\n        setFullnameErr(fullnameErr);\n        setUsernameErr(usernameErr);\n        setPasswordErr(passwordErr);\n        return isValid;\n    }\n\n    return (\n        <Form onSubmit={onSubmit}>\n            {/* <label for=\"email\">Email : </label> */}\n            <Input type=\"text\" \n                   placeholder=\"Email\"\n                   value={email}\n                   onChange={(e) => {setEmail(e.target.value)}}/>\n                   {Object.keys(emailErr).map((key) => {\n                       return <ErrorMessage>{emailErr[key]}</ErrorMessage>\n                   })}\n            {/* <label for=\"fullname\">Full name : </label> */}\n            <Input type=\"text\" \n                   placeholder=\"Full name\"\n                   value={fullname}\n                   onChange={(e) => {setFullname(e.target.value)}}/>\n                   {Object.keys(fullnameErr).map((key) => {\n                       return <ErrorMessage>{fullnameErr[key]}</ErrorMessage>\n                   })}\n            {/* <label for=\"username\">Username : </label> */}\n            <Input type=\"text\" \n                    placeholder=\"Username\"\n                    value={username}\n                    onChange={(e) => {setUsername(e.target.value)}}/>\n                    {Object.keys(usernameErr).map((key) => {\n                       return <ErrorMessage>{usernameErr[key]}</ErrorMessage>\n                   })}\n            {/* <label for=\"password\">Password : </label> */}\n            <Input type=\"password\" \n                    placeholder=\"Password\"\n                    value={password}\n                    onChange={(e) => {setPassword(e.target.value)}}/>\n                    {Object.keys(passwordErr).map((key) => {\n                       return <ErrorMessage>{passwordErr[key]}</ErrorMessage>\n                   })}\n            <SubmitBtn type=\"submit\">Sign up</SubmitBtn>\n        </Form>\n    )\n}\n\nexport default RegisterForm;"]},"metadata":{},"sourceType":"module"}