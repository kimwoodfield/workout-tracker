{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kimwoodfield/Documents/GitHub/workout-tracker/frontend/components/Forms/LoginForm.js\";\nimport React, { useState } from 'react';\nimport SubmitBtn from './SubmitBtn';\nimport Input from './FormInput';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\nconst Form = styled.form.withConfig({\n  displayName: \"LoginForm__Form\",\n  componentId: \"sc-1udqss8-0\"\n})([\"display:flex;flex-direction:column;width:18rem;\"]);\n\nconst LoginForm = () => {\n  const router = useRouter(); // Setting the state\n\n  const {\n    0: username,\n    1: setUsername\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: usernameErr,\n    1: setUsernameErr\n  } = useState({});\n  const {\n    0: passwordErr,\n    1: setPasswordErr\n  } = useState({});\n  const {\n    0: invalidLogin,\n    1: setInvalidLogin\n  } = useState(\"\");\n  const {\n    0: submitting,\n    1: setSubmitting\n  } = useState(false); // Handles the form submission\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setSubmitting(true);\n    const isValid = formValidation(); // If the input data is valid -\n\n    if (isValid) {\n      // Send this data to the api\n      fetch('http://localhost:3000/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        }) // credentials: \"include\"\n\n      }).then(res => res.json()) // parse the response as JSON\n      .then(data => {\n        // Request sent.\n        if (data.status === 401) {\n          setInvalidLogin(\"Invalid login - This user does not exist.\");\n          e.preventDefault();\n        }\n\n        if (data.ok === false) {\n          // if the response is a 401, block the submission..\n          console.log(data);\n          console.log(data.msg);\n          e.preventDefault();\n        } else {\n          // if the response is not a 401, allow the submission.\n          console.log(data.msg);\n          alert(data.msg);\n          setUsername('');\n          setPassword('');\n          router.push('/log');\n        }\n      }).catch(err => {\n        // Fetch couldn't send the request.\n        console.log('fetch failed');\n      });\n    } else {\n      e.preventDefault();\n    }\n  };\n  /* Frontend form validation is handled here */\n\n\n  const formValidation = () => {\n    const usernameErr = {};\n    const passwordErr = {};\n    let isValid = true; // If username is left empty or length of the username is less than five characters -\n\n    if (username.length === 0) {\n      usernameErr.usernameEmpty = \"You must enter a username.\";\n    } else if (username.length < 5) {\n      usernameErr.usernameShort = \"Username needs to be 5 or more characters.\";\n      isValid = false;\n    } // If the length of the password is less than three characters -\n\n\n    if (password.length === 0) {\n      passwordErr.passwordEmpty = \"You must enter a password.\";\n    } else if (password.length < 4) {\n      passwordErr.passwordShort = \"Password needs to be 4 or more characters.\";\n      isValid = false;\n    } // Update error objects\n\n\n    setUsernameErr(usernameErr);\n    setPasswordErr(passwordErr);\n    return isValid;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: username,\n      onChange: e => {\n        setUsername(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: invalidLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }, this), Object.keys(usernameErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: usernameErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: e => {\n        setPassword(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), Object.keys(passwordErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: passwordErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(SubmitBtn, {\n      type: \"submit\",\n      children: \"Log In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n\nexport default LoginForm;","map":{"version":3,"sources":["/Users/kimwoodfield/Documents/GitHub/workout-tracker/frontend/components/Forms/LoginForm.js"],"names":["React","useState","SubmitBtn","Input","ErrorMessage","styled","useRouter","Form","form","LoginForm","router","username","setUsername","password","setPassword","usernameErr","setUsernameErr","passwordErr","setPasswordErr","invalidLogin","setInvalidLogin","submitting","setSubmitting","onSubmit","e","preventDefault","isValid","formValidation","fetch","method","headers","body","JSON","stringify","then","res","json","data","status","ok","console","log","msg","alert","push","catch","err","length","usernameEmpty","usernameShort","passwordEmpty","passwordShort","target","value","Object","keys","map","key"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,MAAMC,IAAI,GAAGF,MAAM,CAACG,IAAV;AAAA;AAAA;AAAA,uDAAV;;AAMA,MAAMC,SAAS,GAAG,MAAM;AAEpB,QAAMC,MAAM,GAAGJ,SAAS,EAAxB,CAFoB,CAIpB;;AACA,QAAM;AAAA,OAACK,QAAD;AAAA,OAAWC;AAAX,MAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACY,QAAD;AAAA,OAAWC;AAAX,MAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM;AAAA,OAACc,WAAD;AAAA,OAAcC;AAAd,MAAgCf,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACgB,WAAD;AAAA,OAAcC;AAAd,MAAgCjB,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM;AAAA,OAACkB,YAAD;AAAA,OAAeC;AAAf,MAAkCnB,QAAQ,CAAC,EAAD,CAAhD;AAIA,QAAM;AAAA,OAAEoB,UAAF;AAAA,OAAcC;AAAd,MAAgCrB,QAAQ,CAAC,KAAD,CAA9C,CAfoB,CAiBpB;;AACA,QAAMsB,QAAQ,GAAIC,CAAD,IAAO;AACpBA,IAAAA,CAAC,CAACC,cAAF;AACAH,IAAAA,aAAa,CAAC,IAAD,CAAb;AACA,UAAMI,OAAO,GAAGC,cAAc,EAA9B,CAHoB,CAIpB;;AACA,QAAID,OAAJ,EAAa;AACT;AACAE,MAAAA,KAAK,CAAC,6BAAD,EAAgC;AACjCC,QAAAA,MAAM,EAAE,MADyB;AAEjCC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFwB;AAKjCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEtB,UAAAA,QAAF;AAAYE,UAAAA;AAAZ,SAAf,CAL2B,CAMjC;;AANiC,OAAhC,CAAL,CAQCqB,IARD,CAQMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARb,EAQyB;AARzB,OASCF,IATD,CASMG,IAAI,IAAI;AACV;AACA,YAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrBlB,UAAAA,eAAe,CAAC,2CAAD,CAAf;AACAI,UAAAA,CAAC,CAACC,cAAF;AACH;;AACD,YAAIY,IAAI,CAACE,EAAL,KAAY,KAAhB,EAAuB;AACnB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACK,GAAjB;AACAlB,UAAAA,CAAC,CAACC,cAAF;AACH,SALD,MAKO;AACH;AACAe,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACK,GAAjB;AACAC,UAAAA,KAAK,CAACN,IAAI,CAACK,GAAN,CAAL;AACA9B,UAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,UAAAA,WAAW,CAAC,EAAD,CAAX;AACAJ,UAAAA,MAAM,CAACkC,IAAP,CAAY,MAAZ;AACH;AACJ,OA5BD,EA6BCC,KA7BD,CA6BOC,GAAG,IAAI;AACV;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,OAhCD;AAiCH,KAnCD,MAmCO;AACHjB,MAAAA,CAAC,CAACC,cAAF;AACH;AACJ,GA3CD;AA6CA;;;AACA,QAAME,cAAc,GAAG,MAAM;AACzB,UAAMZ,WAAW,GAAG,EAApB;AACA,UAAME,WAAW,GAAG,EAApB;AACA,QAAIS,OAAO,GAAG,IAAd,CAHyB,CAKzB;;AACA,QAAIf,QAAQ,CAACoC,MAAT,KAAoB,CAAxB,EAA2B;AACvBhC,MAAAA,WAAW,CAACiC,aAAZ,GAA4B,4BAA5B;AACH,KAFD,MAEO,IAAIrC,QAAQ,CAACoC,MAAT,GAAkB,CAAtB,EAAyB;AAC5BhC,MAAAA,WAAW,CAACkC,aAAZ,GAA4B,4CAA5B;AACAvB,MAAAA,OAAO,GAAG,KAAV;AACH,KAXwB,CAazB;;;AACA,QAAIb,QAAQ,CAACkC,MAAT,KAAoB,CAAxB,EAA2B;AACvB9B,MAAAA,WAAW,CAACiC,aAAZ,GAA4B,4BAA5B;AACH,KAFD,MAEO,IAAIrC,QAAQ,CAACkC,MAAT,GAAkB,CAAtB,EAAyB;AAC5B9B,MAAAA,WAAW,CAACkC,aAAZ,GAA4B,4CAA5B;AACAzB,MAAAA,OAAO,GAAG,KAAV;AACH,KAnBwB,CAqBzB;;;AACAV,IAAAA,cAAc,CAACD,WAAD,CAAd;AACAG,IAAAA,cAAc,CAACD,WAAD,CAAd;AACA,WAAOS,OAAP;AACH,GAzBD;;AA2BA,sBACI,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEH,QAAhB;AAAA,4BAEI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AACQ,MAAA,WAAW,EAAC,UADpB;AAEQ,MAAA,KAAK,EAAEZ,QAFf;AAGQ,MAAA,QAAQ,EAAGa,CAAD,IAAO;AAACZ,QAAAA,WAAW,CAACY,CAAC,CAAC4B,MAAF,CAASC,KAAV,CAAX;AAA4B;AAHtD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAMY,QAAC,YAAD;AAAA,gBAAelC;AAAf;AAAA;AAAA;AAAA;AAAA,YANZ,EAOamC,MAAM,CAACC,IAAP,CAAYxC,WAAZ,EAAyByC,GAAzB,CAA8BC,GAAD,IAAS;AACpC,0BAAO,QAAC,YAAD;AAAA,kBAAe1C,WAAW,CAAC0C,GAAD;AAA1B;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFC,CAPb,eAWI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AACQ,MAAA,WAAW,EAAC,UADpB;AAEQ,MAAA,KAAK,EAAE5C,QAFf;AAGQ,MAAA,QAAQ,EAAGW,CAAD,IAAO;AAACV,QAAAA,WAAW,CAACU,CAAC,CAAC4B,MAAF,CAASC,KAAV,CAAX;AAA4B;AAHtD;AAAA;AAAA;AAAA;AAAA,YAXJ,EAeaC,MAAM,CAACC,IAAP,CAAYtC,WAAZ,EAAyBuC,GAAzB,CAA8BC,GAAD,IAAS;AACpC,0BAAO,QAAC,YAAD;AAAA,kBAAexC,WAAW,CAACwC,GAAD;AAA1B;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFC,CAfb,eAkBI,QAAC,SAAD;AAAW,MAAA,IAAI,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH,CAjHD;;AAmHA,eAAehD,SAAf","sourcesContent":["import React, { useState } from 'react'\nimport SubmitBtn from './SubmitBtn'\nimport Input from './FormInput'\nimport ErrorMessage from '../Common/ErrorMessage'\nimport styled from 'styled-components'\nimport { useRouter } from 'next/router'\n\nconst Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    width: 18rem;\n`\n\nconst LoginForm = () => {\n\n    const router = useRouter()\n\n    // Setting the state\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    const [usernameErr, setUsernameErr] = useState({});\n    const [passwordErr, setPasswordErr] = useState({});\n\n    const [invalidLogin, setInvalidLogin] = useState(\"\");\n\n    \n\n    const [ submitting, setSubmitting ] = useState(false);\n\n    // Handles the form submission\n    const onSubmit = (e) => {\n        e.preventDefault();\n        setSubmitting(true);\n        const isValid = formValidation();\n        // If the input data is valid -\n        if (isValid) {\n            // Send this data to the api\n            fetch('http://localhost:3000/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ username, password })\n                // credentials: \"include\"\n            })\n            .then(res => res.json()) // parse the response as JSON\n            .then(data => {\n                // Request sent.\n                if (data.status === 401) {\n                    setInvalidLogin(\"Invalid login - This user does not exist.\");\n                    e.preventDefault();\n                }\n                if (data.ok === false) {\n                    // if the response is a 401, block the submission..\n                    console.log(data);\n                    console.log(data.msg);\n                    e.preventDefault();\n                } else {\n                    // if the response is not a 401, allow the submission.\n                    console.log(data.msg);\n                    alert(data.msg);\n                    setUsername('');\n                    setPassword('');\n                    router.push('/log');\n                }\n            })\n            .catch(err => {\n                // Fetch couldn't send the request.\n                console.log('fetch failed');\n            })\n        } else {\n            e.preventDefault();\n        }\n    }\n\n    /* Frontend form validation is handled here */\n    const formValidation = () => {\n        const usernameErr = {};\n        const passwordErr = {};\n        let isValid = true;\n\n        // If username is left empty or length of the username is less than five characters -\n        if (username.length === 0) {\n            usernameErr.usernameEmpty = \"You must enter a username.\";\n        } else if (username.length < 5) {\n            usernameErr.usernameShort = \"Username needs to be 5 or more characters.\";\n            isValid = false;\n        }\n\n        // If the length of the password is less than three characters -\n        if (password.length === 0) {\n            passwordErr.passwordEmpty = \"You must enter a password.\";\n        } else if (password.length < 4) {\n            passwordErr.passwordShort = \"Password needs to be 4 or more characters.\";\n            isValid = false;\n        }\n\n        // Update error objects\n        setUsernameErr(usernameErr);\n        setPasswordErr(passwordErr);\n        return isValid;\n    }\n\n    return (\n        <Form onSubmit={onSubmit}>\n            {/* <label for=\"username\">Username : </label> */}\n            <Input type=\"text\" \n                    placeholder=\"Username\"\n                    value={username}\n                    onChange={(e) => {setUsername(e.target.value)}}/>\n                    <ErrorMessage>{invalidLogin}</ErrorMessage>\n                    {Object.keys(usernameErr).map((key) => {\n                       return <ErrorMessage>{usernameErr[key]}</ErrorMessage>\n                   })}\n            {/* <label for=\"password\">Password : </label> */}\n            <Input type=\"password\" \n                    placeholder=\"Password\"\n                    value={password}\n                    onChange={(e) => {setPassword(e.target.value)}}/>\n                    {Object.keys(passwordErr).map((key) => {\n                       return <ErrorMessage>{passwordErr[key]}</ErrorMessage>\n                   })}\n            <SubmitBtn type=\"submit\">Log In</SubmitBtn>\n        </Form>\n    )\n}\n\nexport default LoginForm\n"]},"metadata":{},"sourceType":"module"}