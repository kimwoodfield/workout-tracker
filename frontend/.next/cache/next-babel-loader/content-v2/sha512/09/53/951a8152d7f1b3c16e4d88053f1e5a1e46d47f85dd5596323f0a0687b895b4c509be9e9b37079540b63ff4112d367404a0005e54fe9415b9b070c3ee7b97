{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\kimwoodfield\\\\Documents\\\\GitHub\\\\workout-tracker\\\\frontend\\\\components\\\\Forms\\\\RegisterForm.js\";\nimport React, { useState } from 'react';\nimport SubmitBtn from './SubmitBtn';\nimport Input from './FormInput';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport styled from 'styled-components';\nconst Form = styled.form.withConfig({\n  displayName: \"RegisterForm__Form\",\n  componentId: \"ri5t6n-0\"\n})([\"display:flex;flex-direction:column;width:18rem;\"]);\n\nconst RegisterForm = () => {\n  // Setting the state\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: fullname,\n    1: setFullname\n  } = useState('');\n  const {\n    0: username,\n    1: setUsername\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: emailErr,\n    1: setEmailErr\n  } = useState({});\n  const {\n    0: fullnameErr,\n    1: setFullnameErr\n  } = useState({});\n  const {\n    0: usernameErr,\n    1: setUsernameErr\n  } = useState({});\n  const {\n    0: passwordErr,\n    1: setPasswordErr\n  } = useState({});\n  const {\n    0: submitting,\n    1: setSubmitting\n  } = useState(false); // Handles the form submission\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setSubmitting(true);\n    const isValid = formValidation(); // If the input data is valid - \n\n    if (isValid) {\n      // Make a POST request to our api route with the input data\n      fetch('http://localhost:3000/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          fullname,\n          username,\n          password\n        })\n      }).then(res => res.json()) // parse the response as JSON\n      .then(data => {\n        // Request sent.\n        console.log(data.msg);\n        setEmail('');\n        setFullname('');\n        setUsername('');\n        setPassword('');\n      }).catch(err => {\n        // Fetch couldn't send the request.\n        console.log('fetch failed');\n      });\n    }\n  };\n  /* Frontend form validation is handled here */\n\n\n  const formValidation = () => {\n    const emailErr = {};\n    const fullnameErr = {};\n    const usernameErr = {};\n    const passwordErr = {};\n    let isValid = true; // Regex to test email against\n\n    let regexp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // If email is left empty or does not match the regex -\n\n    if (email.length === 0) {\n      emailErr.emailEmpty = \"You must enter an email address.\";\n    } else if (!email.includes('@')) {\n      emailErr.emailMissingSymb = \"Invalid email. Email must have @\";\n    } else if (regexp.test(email) === false) {\n      emailErr.emailWrongChars = \"This is not a valid email address.\";\n      isValid = false;\n    } // If full name is left empty or first letter of the full name isn't capitalized -\n\n\n    if (fullname.length === 0) {\n      fullnameErr.fullnameEmpty = \"You must enter a full name.\";\n    } else if (fullname[0] !== fullname[0].toUpperCase()) {\n      fullnameErr.startsLowercase = \"First letter of full name needs to be capitalized.\";\n      isValid = false;\n    } // If username is left empty or length of the username is less than five characters -\n\n\n    if (username.length === 0) {\n      usernameErr.usernameEmpty = \"You must enter a username.\";\n    } else if (username.length < 5) {\n      usernameErr.usernameShort = \"Username needs to be 5 or more characters.\";\n      isValid = false;\n    } // If the length of the password is less than three characters -\n\n\n    if (password.length === 0) {\n      passwordErr.passwordEmpty = \"You must enter a password.\";\n    } else if (password.length < 4) {\n      passwordErr.passwordShort = \"Password needs to be 4 or more characters.\";\n      isValid = false;\n    } // Update error objects\n\n\n    setEmailErr(emailErr);\n    setFullnameErr(fullnameErr);\n    setUsernameErr(usernameErr);\n    setPasswordErr(passwordErr);\n    return isValid;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Email\",\n      value: email,\n      onChange: e => {\n        setEmail(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), Object.keys(emailErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: emailErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Full name\",\n      value: fullname,\n      onChange: e => {\n        setFullname(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), Object.keys(fullnameErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: fullnameErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: username,\n      onChange: e => {\n        setUsername(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), Object.keys(usernameErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: usernameErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: e => {\n        setPassword(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), Object.keys(passwordErr).map(key => {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: passwordErr[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 31\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(SubmitBtn, {\n      type: \"submit\",\n      children: \"Sign up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n\nexport default RegisterForm;","map":{"version":3,"sources":["C:/Users/kimwoodfield/Documents/GitHub/workout-tracker/frontend/components/Forms/RegisterForm.js"],"names":["React","useState","SubmitBtn","Input","ErrorMessage","styled","Form","form","RegisterForm","email","setEmail","fullname","setFullname","username","setUsername","password","setPassword","emailErr","setEmailErr","fullnameErr","setFullnameErr","usernameErr","setUsernameErr","passwordErr","setPasswordErr","submitting","setSubmitting","onSubmit","e","preventDefault","isValid","formValidation","fetch","method","headers","body","JSON","stringify","then","res","json","data","console","log","msg","catch","err","regexp","length","emailEmpty","includes","emailMissingSymb","test","emailWrongChars","fullnameEmpty","toUpperCase","startsLowercase","usernameEmpty","usernameShort","passwordEmpty","passwordShort","target","value","Object","keys","map","key"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport SubmitBtn from './SubmitBtn'\r\nimport Input from './FormInput'\r\nimport ErrorMessage from '../Common/ErrorMessage'\r\nimport styled from 'styled-components'\r\n\r\nconst Form = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 18rem;\r\n`\r\n\r\nconst RegisterForm = () => {\r\n\r\n    // Setting the state\r\n    const [email, setEmail] = useState('');\r\n    const [fullname, setFullname] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [emailErr, setEmailErr] = useState({});\r\n    const [fullnameErr, setFullnameErr] = useState({});\r\n    const [usernameErr, setUsernameErr] = useState({});\r\n    const [passwordErr, setPasswordErr] = useState({});\r\n\r\n    const [ submitting, setSubmitting ] = useState(false);\r\n\r\n\r\n    // Handles the form submission\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        setSubmitting(true);\r\n        const isValid = formValidation();\r\n        // If the input data is valid - \r\n        if (isValid) {\r\n            // Make a POST request to our api route with the input data\r\n            fetch('http://localhost:3000/register', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ email, fullname, username, password }),\r\n              })\r\n              .then(res => res.json()) // parse the response as JSON\r\n              .then(data => {\r\n                // Request sent.\r\n                console.log(data.msg);\r\n                setEmail('');\r\n                setFullname('');\r\n                setUsername('');\r\n                setPassword('');\r\n              })\r\n              .catch(err => {\r\n                // Fetch couldn't send the request.\r\n                console.log('fetch failed');\r\n              })\r\n        }\r\n    }\r\n\r\n    /* Frontend form validation is handled here */\r\n    const formValidation = () => {\r\n        const emailErr = {};\r\n        const fullnameErr = {};\r\n        const usernameErr = {};\r\n        const passwordErr = {};\r\n        let isValid = true;\r\n\r\n        // Regex to test email against\r\n        let regexp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n        // If email is left empty or does not match the regex -\r\n        if (email.length === 0) {\r\n            emailErr.emailEmpty = \"You must enter an email address.\";\r\n        } else if (!email.includes('@')) {\r\n            emailErr.emailMissingSymb = \"Invalid email. Email must have @\";\r\n        } else if (regexp.test(email) === false) {\r\n            emailErr.emailWrongChars = \"This is not a valid email address.\";\r\n            isValid = false;\r\n        }\r\n\r\n        // If full name is left empty or first letter of the full name isn't capitalized -\r\n        if (fullname.length === 0) {\r\n            fullnameErr.fullnameEmpty = \"You must enter a full name.\";\r\n        } else if (fullname[0] !== fullname[0].toUpperCase()) {\r\n            fullnameErr.startsLowercase = \"First letter of full name needs to be capitalized.\";\r\n            isValid = false;\r\n        } \r\n\r\n        // If username is left empty or length of the username is less than five characters -\r\n        if (username.length === 0) {\r\n            usernameErr.usernameEmpty = \"You must enter a username.\";\r\n        } else if (username.length < 5) {\r\n            usernameErr.usernameShort = \"Username needs to be 5 or more characters.\";\r\n            isValid = false;\r\n        }\r\n\r\n        // If the length of the password is less than three characters -\r\n        if (password.length === 0) {\r\n            passwordErr.passwordEmpty = \"You must enter a password.\";\r\n        } else if (password.length < 4) {\r\n            passwordErr.passwordShort = \"Password needs to be 4 or more characters.\";\r\n            isValid = false;\r\n        }\r\n\r\n        // Update error objects\r\n        setEmailErr(emailErr);\r\n        setFullnameErr(fullnameErr);\r\n        setUsernameErr(usernameErr);\r\n        setPasswordErr(passwordErr);\r\n        return isValid;\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={onSubmit}>\r\n            {/* <label for=\"email\">Email : </label> */}\r\n            <Input type=\"text\" \r\n                   placeholder=\"Email\"\r\n                   value={email}\r\n                   onChange={(e) => {setEmail(e.target.value)}}/>\r\n                   {Object.keys(emailErr).map((key) => {\r\n                       return <ErrorMessage>{emailErr[key]}</ErrorMessage>\r\n                   })}\r\n            {/* <label for=\"fullname\">Full name : </label> */}\r\n            <Input type=\"text\" \r\n                   placeholder=\"Full name\"\r\n                   value={fullname}\r\n                   onChange={(e) => {setFullname(e.target.value)}}/>\r\n                   {Object.keys(fullnameErr).map((key) => {\r\n                       return <ErrorMessage>{fullnameErr[key]}</ErrorMessage>\r\n                   })}\r\n            {/* <label for=\"username\">Username : </label> */}\r\n            <Input type=\"text\" \r\n                    placeholder=\"Username\"\r\n                    value={username}\r\n                    onChange={(e) => {setUsername(e.target.value)}}/>\r\n                    {Object.keys(usernameErr).map((key) => {\r\n                       return <ErrorMessage>{usernameErr[key]}</ErrorMessage>\r\n                   })}\r\n            {/* <label for=\"password\">Password : </label> */}\r\n            <Input type=\"password\" \r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={(e) => {setPassword(e.target.value)}}/>\r\n                    {Object.keys(passwordErr).map((key) => {\r\n                       return <ErrorMessage>{passwordErr[key]}</ErrorMessage>\r\n                   })}\r\n            <SubmitBtn type=\"submit\">Sign up</SubmitBtn>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm;"]},"metadata":{},"sourceType":"module"}